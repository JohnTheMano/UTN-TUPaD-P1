
# 1- Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario 

def factorial_num(num):
    if num <= 0:
        return f'El n√∫mero ingresado debe ser mayor a 0'
    elif num == 1:
        return 1
    else:
        return num*factorial_num(num-1)

num=int(input("Ingrese un numero: "))
print(f'El factorial de {num} es: {factorial_num(num)}')



# 2- Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique. 


def fibonacci(num):
    # Caso base: si la posici√≥n es 0, el valor es 0
    if num == 0:
        return 0
    # Caso base: si la posici√≥n es 1, el valor es 1
    elif num == 1:
        return 1
    # Caso recursivo: suma de los dos valores anteriores
    else:
        return fibonacci(num - 1) + fibonacci(num - 2)

# Pedimos al usuario que ingrese la posici√≥n hasta la que desea ver la serie
posicion = int(input("Introduce la posici√≥n de la serie de Fibonacci que desea visualizar: "))

# Mostramos un mensaje indicando qu√© posici√≥n se va a mostrar
print(f"Posici√≥n fibonacci: {posicion}:")

# Usamos un bucle para imprimir todos los valores desde la posici√≥n 0 hasta la posici√≥n indicada
for i in range(posicion + 1):
    print(fibonacci(i))  # Imprimimos el valor de Fibonacci en la posici√≥n i



# 3- Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, utilizando la f√≥rmula ùëõùëö = ùëõ ‚àó ùëõ(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general. 

def potencia_num(num, exp):
    if num <= 0:
        return f'El n√∫mero ingresado debe ser mayor a 0'  # Validaci√≥n base > 0
    elif exp == 0:
        return 1  # Cualquier n√∫mero elevado a 0 es 1
    elif exp == 1:
        return num  # Base elevada a 1 es ella misma
    else:
        return num * potencia_num(num, exp - 1)  # Caso recursivo
    
def ejecutar():
    base = int(input("Ingrese la base (n√∫mero mayor a 0): "))
    exponente = int(input("Ingrese el exponente (entero no negativo): "))
    resultado = potencia_num(base, exponente)
    print(f"{base} elevado a {exponente} es: {resultado}")

ejecutar()

# 4- Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal y devuelva su representaci√≥n en binario como una cadena de texto.

def recibir_entero(num):
    # Caso base: si el n√∫mero es 0 o 1, devuelve como cadena
    if num < 2:
        return str(num)
    else:
        # Divisi√≥n entera y agrega el residuo
        return recibir_entero(num//2)+str(num%2)
    
print(recibir_entero(8))

# 5- Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es.

def es_palindromo(palabra):
    # Si la palabra tiene 1 o ning√∫n car√°cter, es un pal√≠ndromo
    if len(palabra) <= 1:
        return True
    # Si el primer y √∫ltimo car√°cter son distintos, no es pal√≠ndromo
    if palabra[0] != palabra[-1]:
        return False
    # Verifica recursivamente la subcadena sin el primer y √∫ltimo car√°cter
    return es_palindromo(palabra[1:-1])

print(es_palindromo("oro"))
print(es_palindromo("negro"))

# 6-Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.

def suma_digitos(n):
    # caso base: suma 0
    if n==0: 
        return n
    else:
        # suma √∫ltimo d√≠gito + suma recursiva del resto
        return n % 10 + suma_digitos(n//10)
    
print(suma_digitos(45)) 

# 7- Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al √∫ltimo nivel con un solo bloque. Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la pir√°mide.

def contar_bloques(n):
    # caso base: 1 bloque
    if n==1:
        return n
    else:
        # suma actual + recursi√≥n
        return n+contar_bloques(n-1)
        
print(contar_bloques(10))


# 8- Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero.

def contar_digito(numero, digito):
    # caso base: n√∫mero terminado
    if numero == 0 :
        return 0
    # suma si hay coincidencia
    elif numero%10 == digito:
        return 1 + contar_digito(numero//10,digito)
    else:
        # sigue sin sumar
        return contar_digito(numero//10,digito)
        
        
print(contar_digito(233333335,3))